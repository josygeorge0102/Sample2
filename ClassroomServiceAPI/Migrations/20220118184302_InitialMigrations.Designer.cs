// <auto-generated />
using System;
using ClassroomServiceAPI;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ClassroomServiceAPI.Migrations
{
    [DbContext(typeof(ClassroomServiceDbContext))]
    [Migration("20220118184302_InitialMigrations")]
    partial class InitialMigrations
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("ClassroomServiceAPI.Entities.Classroom", b =>
                {
                    b.Property<int>("ClassroomId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ClassroomId"), 1L, 1);

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsArchived")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("TeacherId")
                        .HasColumnType("int");

                    b.HasKey("ClassroomId");

                    b.ToTable("Classrooms");

                    b.HasData(
                        new
                        {
                            ClassroomId = 1,
                            ImageUrl = "example.com/myImage",
                            IsArchived = false,
                            Name = "Suyog Classroom",
                            Subject = "suyos Fav. Subject",
                            TeacherId = 1
                        },
                        new
                        {
                            ClassroomId = 2,
                            ImageUrl = "example.com/myImage",
                            IsArchived = false,
                            Name = "Shuchi Classroom",
                            Subject = "shuchi Fav. Subject",
                            TeacherId = 2
                        });
                });

            modelBuilder.Entity("ClassroomServiceAPI.Entities.Question", b =>
                {
                    b.Property<int>("QuestionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("QuestionId"), 1L, 1);

                    b.Property<string>("CorrectAnswer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OptionA")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OptionB")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OptionC")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OptionD")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TeacherId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("QuestionId");

                    b.ToTable("Questions");

                    b.HasData(
                        new
                        {
                            QuestionId = 1,
                            CorrectAnswer = "C#",
                            OptionA = "C#",
                            OptionB = "Typescript",
                            OptionC = "Javascript",
                            OptionD = "C",
                            Subject = "suyos Fav. Subject",
                            TeacherId = 1,
                            Title = "What is my Fav. Language"
                        },
                        new
                        {
                            QuestionId = 2,
                            CorrectAnswer = "javascript",
                            OptionA = "C#",
                            OptionB = "Typescript",
                            OptionC = "Javascript",
                            OptionD = "C",
                            Subject = "shuchi Fav. Subject",
                            TeacherId = 1,
                            Title = "What is my Fav. Language"
                        });
                });

            modelBuilder.Entity("ClassroomServiceAPI.Entities.Result", b =>
                {
                    b.Property<int>("ResultId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ResultId"), 1L, 1);

                    b.Property<int>("ClassroomId")
                        .HasColumnType("int");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<string>("StudentAnswer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<int>("StudentScore")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("TestDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("TestId")
                        .HasColumnType("int");

                    b.HasKey("ResultId");

                    b.HasIndex("ClassroomId");

                    b.HasIndex("QuestionId");

                    b.HasIndex("TestId");

                    b.ToTable("Results");

                    b.HasData(
                        new
                        {
                            ResultId = 1,
                            ClassroomId = 1,
                            QuestionId = 1,
                            StudentAnswer = "C#",
                            StudentId = 4,
                            StudentScore = 5,
                            TestDate = new DateTimeOffset(new DateTime(2022, 1, 18, 18, 43, 2, 378, DateTimeKind.Unspecified).AddTicks(828), new TimeSpan(0, 0, 0, 0, 0)),
                            TestId = 1
                        },
                        new
                        {
                            ResultId = 2,
                            ClassroomId = 2,
                            QuestionId = 2,
                            StudentAnswer = "javascript",
                            StudentId = 5,
                            StudentScore = 10,
                            TestDate = new DateTimeOffset(new DateTime(2022, 1, 18, 18, 43, 2, 378, DateTimeKind.Unspecified).AddTicks(830), new TimeSpan(0, 0, 0, 0, 0)),
                            TestId = 1
                        });
                });

            modelBuilder.Entity("ClassroomServiceAPI.Entities.StudentClassroomMapper", b =>
                {
                    b.Property<int>("ClassroomId")
                        .HasColumnType("int");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.HasKey("ClassroomId", "StudentId");

                    b.ToTable("StudentClassroomMappers");

                    b.HasData(
                        new
                        {
                            ClassroomId = 1,
                            StudentId = 1234
                        },
                        new
                        {
                            ClassroomId = 2,
                            StudentId = 5678
                        });
                });

            modelBuilder.Entity("ClassroomServiceAPI.Entities.Test", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ClassroomId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("TestDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("TestId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasAlternateKey("TestId", "QuestionId");

                    b.HasIndex("ClassroomId");

                    b.HasIndex("QuestionId");

                    b.ToTable("Tests");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ClassroomId = 1,
                            Name = "My new test",
                            QuestionId = 1,
                            TestDate = new DateTimeOffset(new DateTime(2022, 1, 18, 18, 43, 2, 378, DateTimeKind.Unspecified).AddTicks(784), new TimeSpan(0, 0, 0, 0, 0)),
                            TestId = 1
                        },
                        new
                        {
                            Id = 2,
                            ClassroomId = 1,
                            Name = "My very new test",
                            QuestionId = 2,
                            TestDate = new DateTimeOffset(new DateTime(2022, 1, 18, 18, 43, 2, 378, DateTimeKind.Unspecified).AddTicks(795), new TimeSpan(0, 0, 0, 0, 0)),
                            TestId = 1
                        });
                });

            modelBuilder.Entity("ClassroomServiceAPI.Entities.Result", b =>
                {
                    b.HasOne("ClassroomServiceAPI.Entities.Classroom", "Classroom")
                        .WithMany()
                        .HasForeignKey("ClassroomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ClassroomServiceAPI.Entities.Question", "Question")
                        .WithMany()
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ClassroomServiceAPI.Entities.Test", "Test")
                        .WithMany()
                        .HasForeignKey("TestId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Classroom");

                    b.Navigation("Question");

                    b.Navigation("Test");
                });

            modelBuilder.Entity("ClassroomServiceAPI.Entities.StudentClassroomMapper", b =>
                {
                    b.HasOne("ClassroomServiceAPI.Entities.Classroom", "Classroom")
                        .WithMany()
                        .HasForeignKey("ClassroomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Classroom");
                });

            modelBuilder.Entity("ClassroomServiceAPI.Entities.Test", b =>
                {
                    b.HasOne("ClassroomServiceAPI.Entities.Classroom", "Classroom")
                        .WithMany()
                        .HasForeignKey("ClassroomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ClassroomServiceAPI.Entities.Question", "Question")
                        .WithMany()
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Classroom");

                    b.Navigation("Question");
                });
#pragma warning restore 612, 618
        }
    }
}
